class AnimalFeed:
  def __init__(self, animal_type, daily_feed_rate, head_count):
    self.animal_type = animal_type # Вид животного
    self.daily_feed_rate = daily_feed_rate # Суточная норма корма на одну голову (в кг)
    self.head_count = head_count # Количество голов
  def calculate_total_feed(self, days):
    """Метод для вычисления общей потребности в кормах за заданный
    период."""
    return self.daily_feed_rate * self.head_count * days
def main():
  feed_list = [] # Список для хранения информации о потребности в кормах
  days = int(input("Введите количество дней для расчета потребности в кормах:")) # Запрос количества дней
  while True:
    animal_type = input("Введите вид животного (или 'стоп' для завершения): ")
    if animal_type.lower() == 'стоп':
      break # Завершение ввода данных
    head_count = int(input("Введите количество голов: "))
    daily_feed_rate = float(input("Введите суточную норму корма на одну голову(в кг): "))
    # Создание объекта AnimalFeed и добавление его в список
    animal_feed = AnimalFeed(animal_type, daily_feed_rate, head_count)
    feed_list.append(animal_feed) # Добавление информации о корме в список
  # Вывод результатов
  print("\nПотребность в кормах:")
  total_feed_need = 0 # Переменная для общей потребности в кормах
  for animal in feed_list:
    total_feed = animal.calculate_total_feed(days) # Расчет потребности в корме для каждого животного
    total_feed_need += total_feed # Суммирование общей потребности
    print(f"{animal.animal_type}: {total_feed} кг") # Вывод информации о каждом виде животного
  print(f"\nОбщая потребность в кормах за {days} дней: {total_feed_need} кг") # Вывод общей потребности
if __name__ == "__main__":
  main()
