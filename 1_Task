class Crop:
    def __init__(self, name: str, area: float, yield_per_hectare: float):
        """
        Инициализация экземпляра класса Crop.

        :param name: Название культуры.
        :param area: Площадь посева (в гектарах).
        :param yield_per_hectare: Урожайность (в тоннах на гектар).
        """
        self.name = name  # Название культуры
        self.area = area  # Площадь посева
        self.yield_per_hectare = yield_per_hectare  # Урожайность

    def total_yield(self) -> float:
        """
        Расчет общего объема урожая.

        :return: Общий объем урожая (в тоннах).
        """
        return self.area * self.yield_per_hectare  # Общий объем урожая


def main():
    crops = []  # Список для хранения культур
    
    while True:
        try:
            # Ввод названия культуры
            name = input("Введите название культуры (или 'exit' для выхода): ")
            if name.lower() == 'exit':
                break  # Выход из цикла при вводе 'exit'
            
            # Ввод площади посева
            area = float(input("Введите площадь посева (в гектарах): "))
            if area < 0:
                raise ValueError("Площадь посева не может быть отрицательной.")
            
            # Ввод урожайности
            yield_per_hectare = float(input("Введите урожайность (в тоннах на гектар): "))
            if yield_per_hectare < 0:
                raise ValueError("Урожайность не может быть отрицательной.")
            
            # Создание экземпляра Crop
            crop = Crop(name, area, yield_per_hectare)
            crops.append(crop)  # Добавление культуры в список
            
        except ValueError as e:
            print(f"Ошибка ввода: {e}")  # Обработка ошибок ввода
    
    # Расчет общего объема урожая
    total_volume = sum(crop.total_yield() for crop in crops)
    print(f"Общий объем урожая за сезон: {total_volume} тонн")


# Условие запуска программы
if __name__ == "__main__":
    main()
