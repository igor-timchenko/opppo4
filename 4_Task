class Product:
    def __init__(self, name: str, quantity: int, price_per_unit: float):
        """
        Инициализация экземпляра класса Product.
        :param name: Наименование товара.
        :param quantity: Количество товара на складе.
        :param price_per_unit: Цена за единицу товара.
        """
        self.name = name  # Наименование товара
        self.quantity = quantity  # Количество на складе
        self.price_per_unit = price_per_unit  # Цена за единицу
    def total_value(self) -> float:
        """
        Расчет общей стоимости товара на складе.
        :return: Общая стоимость товара.
        """
        return self.quantity * self.price_per_unit  # Общая стоимость
def main():
    products = []  # Список для хранения информации о товарах
    while True:
        try:
            # Ввод наименования товара
            name = input("Введите наименование товара (или 'exit' для выхода): ")
            if name.lower() == 'exit':
                break  # Выход из цикла при вводе 'exit'          
            # Ввод количества товара
            quantity = int(input("Введите количество товара на складе: "))
            if quantity < 0:
                raise ValueError("Количество товара не может быть отрицательным.")            
            # Ввод цены за единицу товара
            price_per_unit = float(input("Введите цену за единицу товара: "))
            if price_per_unit < 0:
                raise ValueError("Цена за единицу не может быть отрицательной.")
            # Создание экземпляра Product
            product = Product(name, quantity, price_per_unit)
            products.append(product)  # Добавление информации о товаре в список        
        except ValueError as e:
            print(f"Ошибка ввода: {e}")  # Обработка ошибок ввода   
    # Расчет общей стоимости всех товаров на складе
    total_inventory_value = sum(product.total_value() for product in products)
    print(f"Общая стоимость всех товаров на складе: {total_inventory_value:.2f} у.е.")
# Условие запуска программы
if __name__ == "__main__":
    main()
