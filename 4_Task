class Product:
    def __init__(self, name: str, quantity: int, unit_price: float):
        self.name = name
        self.quantity = quantity
        self.unit_price = unit_price
    def total_value(self) -> float:
        """Возвращает общую стоимость товара на складе."""
        return self.quantity * self.unit_price
class Inventory:
    def __init__(self):
        self.products = []
    def add_product(self, product: Product):
        """Добавляет продукт в инвентарь."""
        self.products.append(product)
    def total_inventory_value(self) -> float:
        """Возвращает общую стоимость всех товаров на складе."""
        return sum(product.total_value() for product in self.products)
    def display_inventory(self):
        """Выводит информацию о товарах на складе."""
        print(f"\n{'Наименование':<20}{'Количество':<15}{'Цена за единицу':<20}{'Общая стоимость':<20}")
        for product in self.products:
            total_value = product.total_value()
            print(f"{product.name:<20}{product.quantity:<15}{product.unit_price:<20}{total_value:<20}")
def main():
    inventory = Inventory()
    while True:
        try:
            name = input("Введите наименование товара (или 'exit' для выхода): ")
            if name.lower() == 'exit':
                break
            quantity = int(input("Введите количество на складе: "))
            unit_price = float(input("Введите цену за единицу: "))
            product = Product(name, quantity, unit_price)
            inventory.add_product(product)
        except ValueError as e:
            print(f"Ошибка ввода: {e}. Пожалуйста, попробуйте еще раз.")
    # Вывод итоговой информации о товарах на складе
    inventory.display_inventory()  
    # Вывод общей стоимости всех товаров на складе
    total_value = inventory.total_inventory_value()
    print(f"\nОбщая стоимость всех товаров на складе: {total_value:.2f} руб.")
if __name__ == "__main__":
    main()
