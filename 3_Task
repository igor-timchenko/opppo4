class Animal:
    def __init__(self, species: str, daily_feed_rate: float, head_count: int):
        self.species = species
        self.daily_feed_rate = daily_feed_rate
        self.head_count = head_count
    def total_feed_need(self, days: int) -> float:
        return self.head_count * self.daily_feed_rate * days
class Farm:
    def __init__(self):
        self.animals = []
    def add_animal(self, species: str, daily_feed_rate: float, head_count: int):
        if daily_feed_rate < 0 or head_count < 0:
            raise ValueError("Суточная норма корма и количество голов не могут быть отрицательными.")
        animal = Animal(species, daily_feed_rate, head_count)
        self.animals.append(animal)
    def total_feed_need(self, days: int) -> float:
        if days < 0:
            raise ValueError("Количество дней не может быть отрицательным.")
        total = sum(animal.total_feed_need(days) for animal in self.animals)
        return total
def main():
    farm = Farm()
    while True:
        try:
            species = input("Введите вид животного (или 'exit' для выхода): ")
            if species.lower() == 'exit':
                break
            daily_feed_rate = float(input("Введите суточную норму корма на одну голову: "))
            head_count = int(input("Введите количество голов: "))
            farm.add_animal(species, daily_feed_rate, head_count)
        except ValueError as e:
            print(f"Ошибка ввода: {e}")
    while True:
        try:
            days = int(input("Введите количество дней для расчета потребности в кормах: "))
            total_feed_need = farm.total_feed_need(days)
            print(f"Общая потребность в кормах за {days} дней: {total_feed_need:.2f} кг")
            break
        except ValueError as e:
            print(f"Ошибка ввода: {e}")
if __name__ == "__main__":
    main()
