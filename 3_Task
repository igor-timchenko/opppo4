class AnimalFeed:
    def __init__(self, species: str, daily_feed: float, total_heads: int):
        """
        Инициализация экземпляра класса AnimalFeed.

        :param species: Вид животного.
        :param daily_feed: Суточная норма корма на одну голову (в кг).
        :param total_heads: Общее поголовье.
        """
        self.species = species  # Вид животного
        self.daily_feed = daily_feed  # Суточная норма корма
        self.total_heads = total_heads  # Общее поголовье

    def total_feed_needed(self, days: int) -> float:
        """
        Расчет общей потребности в кормах за заданный период.

        :param days: Количество дней.
        :return: Общая потребность в кормах (в кг).
        """
        return self.daily_feed * self.total_heads * days  # Общая потребность


def main():
    animals = []  # Список для хранения информации о животных
    
    while True:
        try:
            # Ввод вида животного
            species = input("Введите вид животного (или 'exit' для выхода): ")
            if species.lower() == 'exit':
                break  # Выход из цикла при вводе 'exit'
            
            # Ввод суточной нормы корма
            daily_feed = float(input("Введите суточную норму корма на одну голову (в кг): "))
            if daily_feed < 0:
                raise ValueError("Суточная норма корма не может быть отрицательной.")
            
            # Ввод общего поголовья
            total_heads = int(input("Введите общее поголовье: "))
            if total_heads < 0:
                raise ValueError("Общее поголовье не может быть отрицательным.")
            
            # Ввод количества дней
            days = int(input("Введите количество дней: "))
            if days < 0:
                raise ValueError("Количество дней не может быть отрицательным.")

            # Создание экземпляра AnimalFeed
            animal_feed = AnimalFeed(species, daily_feed, total_heads)
            animals.append(animal_feed)  # Добавление информации о животном в список
            
        except ValueError as e:
            print(f"Ошибка ввода: {e}")  # Обработка ошибок ввода
    
    # Расчет общей потребности в кормах за период
    total_feed = sum(animal.total_feed_needed(days) for animal in animals)
    print(f"Общая потребность в кормах за период: {total_feed} кг")


# Условие запуска программы
if __name__ == "__main__":
    main()
